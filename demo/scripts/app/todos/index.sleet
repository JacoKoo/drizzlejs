#! drizzle
module(todos) > .todoapp-container
    section.todoapp
        header.todo-header
            h1 todos
            create-todo
        todo-list(todos filter)
        todo-footer(todos filter)

script..
let id = 0
export default {
    items: { views: ['create-todo', 'todo-list', 'todo-footer'] },

    routes: {
        '/:filter': {
            action: 'updateFilter'
        }
    },

    store: {
        models: {
            todos: {
                data: () => []
            },
            filter: {
                data: () => 'all'
            }
        },

        actions: {
            init () {
                this.set({todos: [{name: 'task 1~!', completed: true, id: id++}, {name: 'task 2', id: id++}]})
            },
            newTodo (payload) {
                this.set({todos: this.get('todos').concat([Object.assign(payload, {id: id++})])})
            },

            toggleAll (payload) {
                this.set({todos: this.get('todos').map(it => Object.assign(it, payload))})
            },

            toggle ({id, checked}) {
                const todos = this.get('todos')
                todos.find(it => it.id === id).completed = checked
                this.set({ todos })
            },

            remove (item) {
                this.set({todos: this.get('todos').filter(it => it.id !== item.id)})
            },

            update ({id, name}) {
                console.log('update', id, name)
                const todos = this.get('todos')
                todos.find(it => it.id === id).name = name
                this.set({ todos })
            },

            commitEdit (payload) {
                this.dispatch('update', payload)
            },

            revertEdit (payload) {
                this.dispatch('update', payload)
            },

            clearCompleted (payload) {
                this.set({todos: this.get('todos').filter(it => !it.completed)})
            },

            updateFilter (payload) {
                if (payload.filter !== 'completed' && payload.filter !== 'active') payload.filter = 'all'
                this.set(payload)
            }
        }
    }
}
