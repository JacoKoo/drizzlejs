#! drizzle

module > .main-content > .tile.is-ancestor.h100
    .tile.is-6.is-parent.br
        .tile.is-child.editor.is-12
            file-tab(
                tabs
                action:change=switchFile(event)
                action:rename=renameFile(event)
            )
            code-editor(code action:change=updateCode(event))
            .operators > c-dropdown > .dropdown-item(d=2) > p abc

    .tile.is-6.is-vertical
        .tile.is-parent > .tile.is-child.is-relative > view-show(files json changed)
        .tile.is-parent.bt > .tile.is-child.editor > view-json(json)

script.
    import {compile} from 'sleet'

    const index = `#! drizzle

    module(name) > view-a(name)

    script.
        export default {
            items: { views: ['view-a'] },
            store: {
                models: {
                    name: () => ''
                }
            }
        }
    `

    const view = `#! drizzle

    view
        input.input(bind:value=name)
        h3 > echo('hello ' name '!')
    script.
        export default {
        }
    `
    export default {
        items: {
            views: ['view-json', 'view-show'],
            modules: {
                'file-tab': 'repl/tab',
                'code-editor': 'repl/editor',
                'c-dropdown': 'component/dropdown'
            }
        },

        store: {
            models: {
                files: () => { return {index, 'view-a': view} },
                current: () => 'index',
                json: () => `{\n    "name": "world"\n}`,
                changed: () => true
            },

            actions: {
                switchFile ({from, to}) {
                    this.set({current: to})
                },

                updateCode ({code}) {
                    const files = this.get('files')
                    try {
                        compile(code, {'drizzle': window['sleet-drizzle']}).content
                    } catch (e) {
                        console.log(e)
                    }
                    files[this.get('current')] = code
                    this.set({files, changed: true})
                },

                updateJson ({detail}) {
                    this.set({json: detail})
                },

                renameFile ({name, old}) {
                    const {files, current} = this.get()
                    files[name] = files[old]
                    delete files[old]

                    const c = current === old ? name : current
                    this.set({files, current: c})
                },

                run ({changed}) {
                    this.set({changed})
                }
            }
        },

        computed: {
            tabs ({files}) {
                return Object.keys(files)
            },
            code ({files, current}) {
                return files[current]
            }
        }
    }
