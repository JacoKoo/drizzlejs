#! drizzle

module > .main-content > .tile.is-ancestor.h100
    .tile.is-6.is-parent.br
        .tile.is-child.editor.is-12
            file-tab(
                tabs
                action:change=switchFile(event)
                action:rename=renameFile(event)
            )
            code-editor(code action:change=updateCode(event))
            view-menu(examples)

    ad.tile.is-6.is-vertical
        .tile.is-parent > .tile.is-child.is-relative > view-show(files json changed)
        .tile.is-parent.bt > .tile.is-child.editor > view-json(json)

script..
import {compile} from 'sleet'
import hw from '../../examples/hello-world'
import bg from '../../examples/bind-group'
import ib from '../../examples/if-block'

export default {
    items: {
        views: ['view-json', 'view-show', 'view-menu'],
        modules: {
            'file-tab': 'repl/tab',
            'code-editor': 'repl/editor',
            'c-dropdown': 'component/dropdown'
        }
    },

    routes: {
        '/:code': { action: 'changeExample' }
    },

    store: {
        models: {
            files: () => { return {} },
            current: () => 'index',
            json: () => '',
            changed: () => true,
            examples: () => { return {
                [hw.code]: hw, [bg.code]: bg, [ib.code]: ib
            }}
        },

        actions: {
            switchFile ({from, to}) {
                this.set({current: to})
            },

            updateCode ({code}) {
                const files = this.get('files')
                try {
                    compile(code, {
                        defaultPlugin: 'drizzle',
                        plugins: {drizzle: SleetDrizzle.plugin}
                    }).code
                } catch (e) {
                    console.log(e)
                }
                files[this.get('current')] = code
                this.set({files, changed: true})
            },

            updateJson ({detail}) {
                this.set({json: detail})
            },

            renameFile ({name, old}) {
                const {files, current} = this.get()
                files[name] = files[old]
                delete files[old]

                const c = current === old ? name : current
                this.set({files, current: c})
            },

            run ({changed}) {
                this.set({changed})
            },

            changeExample ({code}) {
                const examples = this.get('examples')
                if (!code || !examples[code]) code = 'hello-world'
                const c = examples[code]
                this.set({files: c.files, json: c.json})
            }
        }
    },

    computed: {
        tabs ({files}) {
            return Object.keys(files)
        },
        code ({files, current}) {
            return files[current]
        }
    }
}
